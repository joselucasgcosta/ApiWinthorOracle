#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial para API Winthor
===============================================

Este script ajuda na configura√ß√£o inicial do projeto,
instalando depend√™ncias e verificando a configura√ß√£o.
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def check_java():
    """Verifica se o Java est√° instalado"""
    try:
        result = subprocess.run(['java', '-version'],
                              capture_output=True, text=True)
        if result.returncode == 0:
            # Extrair vers√£o da sa√≠da
            version_line = result.stderr.split('\n')[0]
            print(f"‚úÖ Java instalado: {version_line}")
            return True
        else:
            print("‚ùå Java n√£o encontrado")
            return False
    except FileNotFoundError:
        print("‚ùå Java n√£o encontrado no PATH")
        return False

def check_jdbc_driver():
    """Verifica se o driver JDBC existe"""
    jdbc_path = Path("connection/ojdbc17.jar")
    if jdbc_path.exists():
        print(f"‚úÖ Driver JDBC encontrado: {jdbc_path}")
        return True
    else:
        print(f"‚ùå Driver JDBC n√£o encontrado: {jdbc_path}")
        print("   Baixe o driver Oracle JDBC e coloque em connection/ojdbc17.jar")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe"""
    env_file = Path("environment/.env")
    example_file = Path("environment/.envexample")

    if env_file.exists():
        print("‚úÖ Arquivo .env encontrado")
        return True
    elif example_file.exists():
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")
        print("   Copie environment/.envexample para environment/.env")
        print("   E configure suas credenciais do Oracle")
        return False
    else:
        print("‚ùå Arquivo .envexample n√£o encontrado")
        return False

def install_dependencies():
    """Instala as depend√™ncias do Python"""
    print("\nüì¶ Instalando depend√™ncias Python...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],
                      check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def test_connection():
    """Testa a conex√£o com o banco (se configurado)"""
    print("\nüîç Testando conex√£o com o banco...")
    try:
        # Importar e testar conex√£o
        sys.path.append('.')
        from models.model import Model

        result = Model.try_connection()
        if result:
            print("‚úÖ Conex√£o com o banco OK")
            return True
        else:
            print("‚ùå Erro na conex√£o com o banco")
            print("   Verifique suas configura√ß√µes em environment/.env")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configura√ß√£o Inicial - API Winthor")
    print("=" * 40)

    checks = [
        ("Python 3.8+", check_python_version),
        ("Java Runtime", check_java),
        ("Driver JDBC", check_jdbc_driver),
        ("Arquivo .env", check_env_file),
    ]

    all_passed = True
    for name, check_func in checks:
        print(f"\nüîç Verificando {name}...")
        if not check_func():
            all_passed = False

    if all_passed:
        print("\n‚úÖ Todas as verifica√ß√µes passaram!")
        print("\nüì¶ Instalando depend√™ncias...")
        if install_dependencies():
            print("\nüîç Testando configura√ß√£o...")
            test_connection()

            print("\nüéâ Configura√ß√£o conclu√≠da!")
            print("\nPara executar a API:")
            print("  uvicorn main:app --reload")
            print("\nPara ver a documenta√ß√£o:")
            print("  http://localhost:8000/docs")
    else:
        print("\n‚ùå Algumas verifica√ß√µes falharam.")
        print("   Corrija os problemas acima antes de continuar.")
        sys.exit(1)

if __name__ == "__main__":
    main()